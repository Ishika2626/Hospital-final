using HospitalManagementSystem.Models;
using HospitalManagementSystem.Repositories;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace HospitalManagementSystem.Controllers
{
    public class StaffController : Controller
    {
        private readonly IStaffRepository _staffRepository;

        public StaffController(IStaffRepository staffRepository)
        {
            _staffRepository = staffRepository;
        }
        public IActionResult Index()
        {
            return View();
        }
        public IActionResult StaffRecords()
        {


            return View();
        }
        public IActionResult DisplayStaffRecords()
        {

            var roles = _staffRepository.GetAllRoles().Select(r => new SelectListItem
            {
                Value = r.RoleId.ToString(),
                Text = r.RoleName
            }).ToList();


            ViewData["Roles"] = roles;

            var employees = _staffRepository.GetAll();
            return View(employees);  // ✅ Uses DisplayStaffRecords.cshtml by default
        }


        private string GenerateLoginId(Employee employee, string roleName)
        {
            string fullName = (employee.FirstName + employee.LastName).ToLower().Replace(" ", "");
            string rolePart = roleName.ToLower().Replace(" ", "");
            return $"{rolePart}.{fullName}";
        }



        // GET: Add new employee
        public IActionResult CreateEmp()
        {


            var roles = _staffRepository.GetAllRoles().Select(r => new SelectListItem
            {
                Value = r.RoleId.ToString(),
                Text = r.RoleName
            }).ToList();


            ViewData["Roles"] = roles;

            return View();
        }

        // POST: Add new employee with autogenerated loginId & password
        [HttpPost]
        public IActionResult CreateEmp(Employee employee)
        {

            // ✅ Step 1: Get role object using RoleId
            Role role = _staffRepository.GetRoleById(Convert.ToInt16(employee.RoleId));
            if (role == null)
            {
                TempData["Error"] = "Invalid Role selected.";
                return View("DisplayStaffRecords", employee); // Pass the same model back if invalid
            }

            // ✅ Step 2: Generate LoginId and Password using role.RoleName
            string loginId = GenerateLoginId(employee, role.RoleName);
            employee.LoginId = loginId;
            employee.Password = loginId;

            // ✅ Step 3: Insert employee with credentials
            _staffRepository.Add(employee);



            // Step 4: Fetch the updated list of employees
            var employees = _staffRepository.GetAll(); // Get the updated list of employees
            TempData["Success"] = $"Employee Created. Login ID & Password: {loginId}";
            return RedirectToAction("DisplayStaffRecords"); // Return the list of employees to the view



        }





        //// GET: Edit employee
        //public IActionResult Edit(int id)
        //{
        //    var employee = _employeeRepository.GetById(id);
        //    if (employee == null) return NotFound();

        //    return View(employee);
        //}

        // POST: Edit employee
        [HttpPost]
        public IActionResult Edit(Employee employee)
        {
            if (ModelState.IsValid)
            {
                _staffRepository.Update(employee);
                TempData["Success"] = "Employee updated successfully.";
                return RedirectToAction("DisplayStaffRecords");
            }
            return View(employee);
        }

        //// GET: Confirm Delete
        //public IActionResult Delete(int id)
        //{
        //    var employee = _employeeRepository.GetById(id);
        //    if (employee == null) return NotFound();

        //    return View(employee);
        //}

        //// POST: Delete employee
        //[HttpPost, ActionName("Delete")]
        //public IActionResult DeleteConfirmed(int id)
        //{
        //    _employeeRepository.Delete(id);
        //    TempData["Success"] = "Employee deleted successfully.";
        //    return RedirectToAction("Index");
        //}

        [HttpGet]
        public IActionResult Login()
        {
            return View(new Employee()); // Make sure the model is initialized properly
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Login(Employee model)
        {

            var user = _staffRepository.Login(model.LoginId, model.Password);

            if (user != null)
            {
                HttpContext.Session.SetString("LoginID", user.LoginId);
                HttpContext.Session.SetString("Role", user.RoleName);

                // Store profile data in session
                HttpContext.Session.SetString("FullName", user.FirstName + " " + user.LastName);
                HttpContext.Session.SetString("Email", user.Email);
                HttpContext.Session.SetString("PhoneNumber", user.PhoneNumber);
                HttpContext.Session.SetString("Role", user.RoleName);
                HttpContext.Session.SetString("Address", user.Address);

                // Optionally, store the other profile fields if needed
                HttpContext.Session.SetInt32("EmployeeId", user.EmployeeId);
                HttpContext.Session.SetString("Gender", user.Gender);
                HttpContext.Session.SetString("DateOfBirth", user.DateOfBirth.ToString("yyyy-MM-dd"));
                HttpContext.Session.SetString("HireDate", user.HireDate.ToString("yyyy-MM-dd"));

                // Redirect based on role
                switch (user.RoleName.ToLower())
                {
                    case "nurse":
                        return RedirectToAction("NurseDashboard", "StaffHome");
                    case "receptionist":
                        return RedirectToAction("ReceptionistDashboard", "StaffHome");
                    case "pharmacist":
                        return RedirectToAction("PharmacistDashboard", "StaffHome");
                    case "lab technician":
                        return RedirectToAction("LabTechnicianDashboard", "StaffHome");
                    case "hr manager":
                        return RedirectToAction("HRManagerDashboard", "StaffHome");
                    case "billing staff":
                        return RedirectToAction("BillingStaffDashboard", "StaffHome");
                    case "emergency staff":
                        return RedirectToAction("EmergencyStaffDashboard", "StaffHome");
                    case "blood bank staff":
                        return RedirectToAction("BloodBankStaffDashboard", "StaffHome");
                    case "admin":
                        return RedirectToAction("adminDashBoard", "DashBoard");
                    default:
                        return RedirectToAction("Index", "Home");
                }
            }

            ModelState.AddModelError("", "Invalid login credentials.");


            return View(model);
        }

        public IActionResult Payroll()
        {
            return View();
        }
        public IActionResult DisplayPayroll()
        {
            return View();
        }
        public IActionResult Scheduling()
        {
            return View();
        }
        public IActionResult DisplayScheduling()
        {
            return View();
        }

        [HttpPost]
        public IActionResult Roles(Role role)
        {
            if (ModelState.IsValid)
            {
                _staffRepository.AddRole(role);
                return RedirectToAction("DisplayRoles");
            }
            var roles = _staffRepository.GetAllRoles();
            return View(roles);
        }

        public IActionResult DisplayRoles()
        {
            var roles = _staffRepository.GetAllRoles();
            return View(roles);
        }
        // View Role Details
        public IActionResult ViewRole(int id)
        {
            var role = _staffRepository.GetRoleById(id);
            if (role == null) return NotFound();
            return View(role);
        }


        // POST: Update Role
        [HttpPost]
        public IActionResult EditRole(Role role)
        {
            if (ModelState.IsValid)
            {
                _staffRepository.UpdateRole(role);
                return RedirectToAction("DisplayRoles");
            }
            return View(role);
        }

        [HttpPost]
        public IActionResult DeleteRole(int roleId)
        {
            _staffRepository.DeleteRole(roleId);
            return RedirectToAction("DisplayRoles");
        }

        [HttpPost]
        public IActionResult Departments(Department department)
        {
            if (ModelState.IsValid)
            {
                _staffRepository.AddDepartment(department);
                return RedirectToAction("DisplayDepartments");
            }

            var departments = _staffRepository.GetAllDepartments();
            return View("DisplayDepartments", departments);
        }
        public IActionResult DisplayDepartments()
        {
            var departments = _staffRepository.GetAllDepartments();
            return View(departments);
        }
        [HttpPost]
        public IActionResult EditDepartment(Department dept)
        {
            _staffRepository.UpdateDepartment(dept);
            return RedirectToAction("DisplayDepartments");
        }

        [HttpPost]
        public IActionResult DeleteDepartment(int id)
        {
            _staffRepository.DeleteDepartment(id);
            return RedirectToAction("DisplayDepartments");
        }

        public IActionResult Attendance()
        {
            return View();
        }
        public IActionResult DisplayAttendance()
        {
            return View();
        }
        public IActionResult LeaveRequests()
        {
            return View();
        }
        public IActionResult DisplayLeaveRequests()
        {
            return View();
        }

        public IActionResult PerformanceReviews()
        {
            return View();
        }
        public IActionResult DisplayPerformanceReviews()
        {
            return View();
        }

        public IActionResult Training()
        {
            return View();
        }

        public IActionResult DisplayTraining()
        {
            return View();
        }
    }
}
